// Code generated by go-bindata.
// sources:
// config.json
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x96\xc1\x8e\xda\x30\x10\x86\xef\x3c\x85\xe5\xf3\xc6\x26\x74\x57\x2d\x79\x95\x6a\x0f\x26\x9e\xb2\x56\x9c\xb1\x65\x8f\xd3\x55\x2b\xde\xbd\x8a\xa1\xac\x03\x02\x15\x04\x2a\xed\x09\xe1\x19\x4f\xfe\x6f\xfe\x89\x32\x3f\x67\x8c\xf1\x55\x6a\x3b\xa0\xc8\x1b\x36\xfe\x65\x8c\xfb\xb4\xb2\xa6\xb5\x6e\x3d\x9e\x7d\xcd\x67\x6c\x17\xcb\x71\xc0\xc1\x04\x87\x3d\x20\x15\x09\x39\xa4\x61\xe0\x4f\x07\x07\x60\x9d\xcf\xb9\x93\x40\x54\xa8\x57\xee\xfd\x28\xbb\x57\xa8\xd6\xa0\xf9\xfe\xf8\xf5\x23\x83\xa3\xea\x81\x37\x8c\x77\x4e\x1b\x5c\x6b\x18\xaa\x42\x6b\x91\x17\x60\x6d\x1c\x8e\x99\x29\x56\xa0\x22\x55\xf5\xef\x82\x9b\xfc\xfb\x3a\x63\x6c\x33\x5e\xe0\x80\xda\x3b\x83\x25\xbf\xf1\x17\x73\xfb\xe0\x74\x6a\x69\x7c\xe8\x04\xe8\x2c\x4d\x0a\x76\x94\xf8\x46\xe4\x63\x23\xa5\x17\x5b\x2c\xd1\xba\x5e\x56\xd2\xf8\xbd\xe4\xa7\x0b\x3d\xf8\xa6\x92\xa5\xa3\xce\xde\xd3\x98\x03\x94\xec\xcc\xe2\x24\xcf\xac\xb8\xce\x8d\x6f\xdf\xa0\xed\x1e\xa3\xe5\x5b\x29\xff\x59\xdf\xa7\x50\x93\xe6\x77\xba\xb2\x8a\x20\xd2\x5f\x69\xff\x56\x67\xd5\x69\x11\x3f\x09\xd5\xab\x1f\x0e\xd5\xf7\x98\x75\x7f\x94\x97\x5b\x81\xd5\x00\x21\x1a\x87\x82\xde\xe9\xdf\x35\xe8\x0c\x71\xf1\xdc\x73\xc8\x53\xfb\xac\x01\xa4\x6b\x2d\xbc\x51\x3f\x2e\xe1\xce\x7a\xaf\x66\xbf\xcc\xee\x62\x42\x6f\x20\xf1\x1e\x03\x79\xcd\xe4\x9c\x90\xb7\x2b\x75\xcb\x97\xe5\xaa\xc1\x3e\x6d\xf0\x1f\x28\x3c\x98\x6d\x97\xf4\xa3\x2d\x20\x05\x75\x23\xe5\xf2\x59\x2c\x5e\x9e\x45\xbd\xac\xc5\x4b\xdd\x7c\x99\x2f\xe7\x32\xab\x96\x9d\x21\x38\x41\xe5\x90\x82\xb3\x0f\xcc\x35\xba\xb9\xab\x51\x7e\x48\x76\xc2\xcf\xa0\x51\x42\x04\x1b\x21\x0c\x10\x1e\x98\xaf\xc9\x5f\x49\x9a\xb0\x1d\x33\xed\xf7\xc3\xe0\x12\x41\xb1\x1c\x6a\x18\x8a\xab\x63\xd1\x7a\xf1\x59\xcc\xc5\x5c\xe4\x15\x73\x33\xdb\xfc\x0a\x00\x00\xff\xff\xd5\xe6\xae\xab\x55\x0b\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 2901, mode: os.FileMode(420), modTime: time.Unix(1446555960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
