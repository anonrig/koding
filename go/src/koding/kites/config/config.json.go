// Code generated by go-bindata.
// sources:
// config.json
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x96\xc1\x6e\xdb\x30\x0c\x86\xef\x79\x0a\x41\xe7\x5a\x6e\xbb\xc3\x80\xbc\xca\xd0\x83\x62\x71\xae\x60\x99\x12\x24\xca\x2b\x36\xf8\xdd\x07\xcb\x59\x2a\x3b\xb0\x31\x1b\x29\x96\xee\x14\x44\xa4\xe8\xff\xe3\xcf\xc4\xfc\x75\x60\x8c\x9f\x62\xd5\x00\x05\x7e\x64\xc3\x57\xc6\xb8\x8b\x27\xa3\x2b\x63\xeb\xe1\xec\x5b\x3a\x63\xe7\x58\x8a\x03\x76\xda\x5b\x6c\x01\x29\x4b\x48\x21\x05\x1d\x7f\x98\x1d\x80\xb1\x2e\xe5\x4e\x02\x41\xa2\x3a\xd9\xb7\xab\xec\x56\xa2\xac\x41\xf1\xcb\xf1\xcb\x7b\x06\x47\xd9\x02\x3f\x32\xde\x58\xa5\xb1\x56\xd0\x15\x99\xd6\x2c\xcf\x43\xad\x2d\x0e\x99\x31\x14\x20\x03\x15\x4f\x7f\x0a\xf6\xe9\xf3\xe5\xc0\x58\x3f\x5c\xe0\x80\xca\x59\x8d\x39\xbf\x76\x9b\xb9\x9d\xb7\x2a\x56\x34\x3c\x74\x02\xb4\x4a\x13\xbd\x19\x24\xbe\x12\xb9\x70\x2c\x4b\x27\x46\x2c\x51\xd9\xb6\x2c\x4a\xed\x2e\x92\x1f\x36\x7a\xf0\x5d\x46\x43\x57\x9d\xfd\x48\x63\x66\x28\xc9\x99\xe7\x45\x9e\x43\x76\x9d\x6b\x57\xbd\x42\xd5\xdc\x47\xcb\x47\x29\xff\x59\xdf\xa7\x50\x93\xe6\x37\xaa\x30\x92\x20\xd0\x3f\x69\xff\xa8\xb3\x68\x94\x08\x5f\x84\x6c\xe5\x4f\x8b\xf2\x47\x48\xba\xdf\xcb\x97\xa3\xc0\xa2\x03\x1f\xb4\x45\x41\x6f\xf4\x79\x0d\x5a\x21\xce\x9e\xbb\x86\x3c\xb5\xcf\x68\x40\xda\x6b\xe1\x8d\xfa\xb1\x85\x3b\xe9\xdd\xcd\xbe\xcd\xee\x6c\x42\x6f\x20\xf1\x23\x06\x72\xcf\xe4\x2c\xc8\x3b\x97\xba\xe5\x8f\x65\xd7\x60\x2f\x1b\xfc\x17\x0a\x67\xb3\x6d\xa3\xba\xb7\x05\x64\x46\x7d\xae\x91\xff\xe1\x26\xd9\x65\xa3\x09\x16\xb0\x2c\x92\xb7\xe6\x13\x82\x8d\xc2\x57\xd0\x28\x22\x82\x09\xe0\x3b\xf0\x77\xcc\x77\x4c\xaf\x49\x9a\xb0\x5d\x33\x5d\x16\x44\x6f\x23\x41\xb6\x1d\x2a\xe8\xb2\xab\x43\xd1\xa7\xe7\xaf\xe2\x51\x3c\x8a\xb4\x63\xf6\x87\xfe\x77\x00\x00\x00\xff\xff\x6f\xaf\x60\x64\x56\x0b\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 2902, mode: os.FileMode(420), modTime: time.Unix(1446555960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
