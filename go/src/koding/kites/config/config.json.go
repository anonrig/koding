// Code generated by go-bindata.
// sources:
// config.json
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x95\x4b\x6e\x83\x30\x10\x86\xf7\x9c\xc2\xf2\x3a\x40\x92\x4d\x25\xae\x52\x65\x41\xf0\x94\x58\x98\x19\xcb\x8c\x51\xa5\x8a\xbb\x57\x76\x1e\x35\xe9\x43\x8d\xda\x2a\x74\x85\x98\x87\xe7\xff\xf8\x91\xe7\x25\x13\x42\xee\x7d\xd3\x01\x0f\xb2\x12\xe1\x55\x08\x69\xfd\xde\xe8\xc6\x50\x1b\x62\x8f\x31\x26\x4e\xb9\x98\x07\x1c\xb5\x23\xec\x01\x39\x29\x88\x29\x05\xa3\x5c\x5d\x05\xc0\x90\x8d\xb5\xd7\x89\xbe\xc6\xba\x05\x35\x8f\x0f\x35\xaa\x3d\x3d\xcb\x4b\x6c\xf7\x96\x96\x58\xf7\x20\x2b\x21\x3b\x52\x1a\x5b\x05\x63\x9e\x68\x4d\xea\x1c\xb4\x9a\x30\x54\xfa\x21\x87\x7a\xe0\x7c\x73\x3e\x70\x8a\xcf\x5d\x26\xc4\x14\x1a\x24\xa0\xb2\xa4\x31\xe5\xd7\xf6\x66\x6e\xeb\x48\xf9\x86\xc3\xd0\x19\xcd\x19\xf1\x43\x1a\xef\x4c\x90\x78\x60\xb6\x43\x55\x96\xb6\x38\x62\x15\x0d\xf5\x65\x5e\x6a\x7b\x91\xbc\xba\xd1\x83\xa7\xda\x1b\xfe\xd6\xcc\xf8\x09\xb7\xbf\x36\xf8\x4f\xcd\xbf\x4d\x7a\x96\xb4\x4b\x6d\x9b\x03\x34\xdd\x32\x6c\x3d\x4a\xb9\x97\xb7\x3f\x9b\x7e\x7f\x83\xe7\xfa\x67\x2e\x77\x86\xbc\x5a\xda\x95\x75\x05\x75\xaa\x4d\xa9\xa2\xec\xb2\xd3\x0c\x9f\x60\x11\xb2\x23\xf3\x0f\xc1\x8e\xc2\xbf\x40\x63\x8f\x08\x66\x00\x37\x82\x5b\x30\x5f\x15\xff\x45\x9e\xb1\xbd\x67\xba\xac\x14\x47\x9e\x21\xd9\x27\x0a\xc6\xa4\x35\x1c\xba\xd9\x3e\x14\xeb\x62\x5d\xc4\xad\x34\x65\xd3\x6b\x00\x00\x00\xff\xff\xee\x3d\x72\x3f\x88\x07\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 1928, mode: os.FileMode(420), modTime: time.Unix(1446555960, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
