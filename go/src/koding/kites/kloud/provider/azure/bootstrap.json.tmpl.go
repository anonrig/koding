// Code generated by go-bindata.
// sources:
// bootstrap.json.tmpl
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x41\xaf\xd3\x30\x0c\x3e\x6f\xbf\x62\x8a\x38\xa1\xbd\x32\x71\xe4\x86\x38\x00\x42\x7a\x42\x6c\xe2\x82\x50\x94\xb5\x59\x17\xbd\xae\xa9\x9c\x64\x8f\x51\xe5\xbf\xe3\x24\xcd\xba\xa6\x1b\xeb\xd4\x53\x62\x7f\xf6\xe7\xcf\x8e\xdb\xce\x67\xa4\x01\x79\x14\x05\x07\xf2\x61\x81\xc7\x19\x61\x7f\x0d\xf0\xee\x80\x56\xb3\xad\x84\xda\x53\xc5\xb5\x16\x75\xa9\xd0\x40\xde\xb4\x47\x06\x99\xf7\xa3\xa9\xdd\x92\xa5\xc7\x29\xb3\x55\x39\x88\x46\x0b\x59\x53\x51\xa4\xb0\xc4\x6c\x09\x82\xec\x7c\x66\x11\x4c\x80\x2b\x69\x20\xe7\x03\x42\x74\x2f\x95\xe6\x05\xe6\x81\xa3\xc8\x7b\x7e\x2f\xb2\xc0\xb4\xf1\x38\x23\x35\x3b\x38\x23\x69\xdb\xec\x8b\x47\xac\x03\xe0\x19\xef\x6d\x47\x6e\x46\x2a\x99\x33\x97\x3a\xa5\x15\xef\xcf\x8e\xbc\xd9\xf3\x03\x07\x56\xd1\x5c\xd6\x9a\xd7\xda\x09\xb0\x63\x95\xe2\x9d\x43\xc1\xcf\x75\xb8\x60\x21\xe7\xa2\x63\xb9\xc8\x81\x33\x77\xde\x9e\x16\xdf\x02\xd1\x48\x80\x6d\x79\xd5\xf1\xdc\x70\x76\x58\x57\xa6\xb4\x36\x0b\xd5\x64\xb9\x3c\x38\x41\x9c\x22\x28\x49\xdb\x8a\xdd\x22\x5b\x6b\x09\xac\xe4\x83\x72\x7a\x75\x54\xb0\x3e\x22\xcf\xb5\x80\x0f\xeb\x93\x94\xdf\xc5\xbc\x5f\x3f\xcb\x73\x69\x6a\x4d\xf5\xa9\x49\xf8\x6c\xf0\xc6\xda\x41\xf9\xbc\x2e\x06\xb5\xf2\xdc\x80\xd0\x27\x5a\x82\x34\xcd\xa4\x52\x3b\xc4\x67\x07\x78\xb4\xd2\x9e\x49\x4f\xe1\x28\x40\x1b\x1c\x8a\x9a\xeb\x57\x09\x2f\x53\x38\xfc\x0c\x90\xe7\x80\x18\x92\x60\x45\x81\x43\xaf\xa8\x6a\x98\xef\xdd\xaf\x01\x95\x81\xd5\x92\xdf\x8f\xf6\x08\xdf\x1a\xf2\x3c\x93\xea\x59\xa1\xe1\x29\x30\x7e\xd2\x38\x83\x9d\x7f\x4f\xa7\x01\xbe\x13\x7f\xd2\xf8\x09\x9d\x08\x1a\x75\x05\x41\xd7\xfa\x15\x67\xdc\x91\x08\xe2\x7a\x75\x83\xc4\x61\xd4\x7f\x98\x0a\xc5\x59\xde\xea\x38\x05\xb4\xdf\x95\x5c\x95\x70\xa5\xb8\x84\x26\x75\xde\xca\x2b\x7e\x63\x4c\xa2\xda\x71\x50\xbf\xd6\x5b\x1c\xdc\xa2\x9f\xe3\xd8\x82\x8f\x55\x25\x5f\xe3\x75\x03\x42\xba\x48\x68\x78\xbf\x5a\xc5\xd4\x7e\xab\xd1\xb1\xba\xab\xcc\x7f\xef\x56\x64\xe8\xd9\x48\xd0\x14\x58\x5d\xfa\xcc\x6f\x2f\xde\x1c\xae\x5a\xdf\xe3\x29\xc1\x2e\xdd\x6f\x44\xc4\x5f\x80\x96\xb9\xf4\x0b\x69\xf3\xe9\x3b\xb9\xe8\x47\xf7\xf6\xfc\x62\x96\x46\x37\x46\x4f\x5a\xcb\x47\x56\x19\x7e\x39\x04\x43\xbf\x38\x04\x71\xf3\x2f\xef\x6f\xb2\x51\xc4\xc4\x71\x14\x72\xd2\xda\xbc\xbe\x4a\xc6\xb9\xae\x8e\xf0\x45\xaa\x64\x45\xdd\xda\x0f\xa3\xc0\x89\xe3\xff\x74\x19\xbc\xe2\xc9\x91\x02\xac\x7f\x6d\xae\x97\x73\x3b\x9f\xff\x0b\x00\x00\xff\xff\xd0\xa4\xff\x2f\xfa\x07\x00\x00")

func bootstrapJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapJsonTmpl,
		"bootstrap.json.tmpl",
	)
}

func bootstrapJsonTmpl() (*asset, error) {
	bytes, err := bootstrapJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.json.tmpl", size: 2042, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap.json.tmpl": bootstrapJsonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap.json.tmpl": {bootstrapJsonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
