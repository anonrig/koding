// Code generated by go-bindata.
// sources:
// bootstrap.json.tmpl
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapJsonTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x94\xcf\x6a\xdc\x30\x10\xc6\xcf\xf6\x53\x18\x91\x53\xd9\xb8\x4b\x8f\xb9\x95\x1e\xda\x52\x08\xa5\x09\xbd\x94\x22\x64\x7b\xe2\x88\xc8\x92\xd0\x9f\x4d\xb7\xc6\xef\x5e\x24\x59\xb1\x2d\xef\x76\xbd\xec\xc9\xab\x99\x4f\xbf\xf9\x66\x34\x7d\x9e\x21\xa9\xc4\x81\x36\xa0\xd0\x5d\xd1\xe7\x59\x86\xc8\x5f\xab\x60\xfc\xc8\x90\xb4\x15\xa3\xfa\x19\x6b\x30\x86\xf2\x56\xa3\xbb\x02\xdd\xf4\x07\xa2\x4a\x1f\x87\xd3\xf3\x01\xed\x7c\x9e\xb6\x95\xae\x15\x95\x86\x0a\x8e\x69\x93\xa6\x25\xc7\x03\xca\xb3\x6c\xc8\xb3\x61\x97\x67\x48\x81\x16\x56\xd5\xb0\x00\xc2\xcf\x42\x1b\x68\xb0\x06\x75\xa0\xf5\xc4\xf7\x22\x1a\xca\xdb\xf8\x99\x21\x4e\x3a\x77\x88\xfa\xbe\xfc\xe2\x33\x1e\x42\xc2\x3d\xe9\x60\x18\xe1\x32\xc4\x44\x4d\xdc\xd5\x29\x56\xfc\xff\x2d\x10\xe4\x33\x74\xa0\x08\xc3\xb5\xe0\x06\xb8\x71\x06\x3c\x11\xa6\x61\x0c\x68\xe0\xad\x0e\x27\x16\xee\x2c\x46\xca\xa2\x56\x40\xdc\x77\x75\x2c\xbe\x05\xd0\x08\x40\x2a\x60\x23\xe7\x23\x90\xee\x81\xd9\x76\x18\xca\x50\x4d\x59\x8b\xce\x19\xe2\x1c\xc9\x86\x5d\xdf\xd3\xa7\xa2\x7c\x30\x42\x91\x16\x16\xe5\x4c\xee\xe8\x70\x7a\x8d\x3d\xa7\x04\xaf\xf6\x27\x29\x7f\xd4\xbc\x5c\x3f\xa9\x6b\x61\xb9\xc1\xe6\x28\x13\x9e\xc7\xa3\x74\x20\xf3\xf2\x81\x37\x8b\x5a\xa1\xb6\x8a\x9a\x23\x6e\x95\xb0\x72\x53\xa9\x63\xc6\x67\x97\x70\x6d\xa5\x13\xc9\x84\x70\xa0\xca\x58\xc2\x30\x07\xf3\x2a\xd4\xcb\x16\x86\x9f\x21\xe5\x3e\x64\x2c\x21\x48\xd3\x28\xd0\x1a\x6b\x49\x7c\xef\x7e\x2d\x50\x16\xa7\x03\xfa\x7d\x6d\x8f\xb4\xad\x38\x98\x37\xa8\x89\x4a\xdb\xea\x36\x10\xdf\x1a\x20\xdd\x18\x3f\xe1\x48\x05\x4f\xf4\x4f\xaa\x9f\xe0\xc4\xa4\x55\x57\xd0\x4d\x7f\xaa\x5f\x71\xc6\x1d\x44\x30\xd7\xbb\x1b\x2c\x0e\xa3\xfe\xc3\x32\x18\xe6\x76\x2f\x15\xb0\xb2\xec\xf2\x84\xeb\x56\x9d\x28\x2e\xc1\xc4\x2e\x5a\x7b\xc7\xcf\x8c\x49\x74\x3b\x0e\xea\x57\x5e\x09\xcb\x9b\x69\x8e\x63\x0b\x3e\x32\x26\x5e\xe3\xdf\x52\x51\xe1\x94\xd0\x5d\xf1\x61\xbf\x8f\x57\xfb\xad\x86\xd7\xee\xee\x4b\xff\x7b\xbf\x47\xcb\x48\x29\x94\xc1\x8a\xf0\xd6\xdf\xfc\x6e\xf6\xe6\x0c\xe5\xbe\xc7\x5b\xc4\xe6\xe1\x67\x14\xa5\x12\x46\xd4\xc2\x2f\xa4\xc7\x4f\xdf\xd1\xac\x1f\xe3\xdb\xf3\x8b\x59\x58\x23\xad\xd9\xb4\x96\x0f\x84\x59\x98\x0f\xc1\x32\x2e\x0e\x41\xdc\xfc\xbb\xcb\x9b\x6c\xa5\x98\x04\xae\x24\x37\xad\xcd\xd3\xab\x64\x7d\xd7\xc9\x11\x9e\x5d\x95\xac\xa8\x73\xfb\x61\x25\x9c\x04\xfe\xcf\x97\xc5\x2b\xde\xac\x14\xd2\xa6\xd7\xe6\x7a\x99\x0f\x79\xfe\x2f\x00\x00\xff\xff\xd0\xa4\xff\x2f\xfa\x07\x00\x00")

func bootstrapJsonTmplBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapJsonTmpl,
		"bootstrap.json.tmpl",
	)
}

func bootstrapJsonTmpl() (*asset, error) {
	bytes, err := bootstrapJsonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.json.tmpl", size: 2042, mode: os.FileMode(420), modTime: time.Unix(1470666525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap.json.tmpl": bootstrapJsonTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap.json.tmpl": &bintree{bootstrapJsonTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
